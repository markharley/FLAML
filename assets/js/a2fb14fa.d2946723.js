"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[525],{3905:(e,t,r)=>{r.d(t,{Zo:()=>h,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},c=Object.keys(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)r=c[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),i=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},h=function(e){var t=i(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,c=e.originalType,s=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),p=i(r),d=a,g=p["".concat(s,".").concat(d)]||p[d]||u[d]||c;return r?n.createElement(g,l(l({ref:t},h),{},{components:r})):n.createElement(g,l({ref:t},h))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var c=r.length,l=new Array(c);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var i=2;i<c;i++)l[i]=r[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},7678:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>o,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const c={sidebar_label:"search_thread",title:"tune.searcher.search_thread"},l=void 0,o={unversionedId:"reference/tune/searcher/search_thread",id:"reference/tune/searcher/search_thread",isDocsHomePage:!1,title:"tune.searcher.search_thread",description:"SearchThread Objects",source:"@site/docs/reference/tune/searcher/search_thread.md",sourceDirName:"reference/tune/searcher",slug:"/reference/tune/searcher/search_thread",permalink:"/FLAML/docs/reference/tune/searcher/search_thread",editUrl:"https://github.com/microsoft/FLAML/edit/main/website/docs/reference/tune/searcher/search_thread.md",tags:[],version:"current",frontMatter:{sidebar_label:"search_thread",title:"tune.searcher.search_thread"},sidebar:"referenceSideBar",previous:{title:"online_searcher",permalink:"/FLAML/docs/reference/tune/searcher/online_searcher"},next:{title:"suggestion",permalink:"/FLAML/docs/reference/tune/searcher/suggestion"}},s=[{value:"SearchThread Objects",id:"searchthread-objects",children:[{value:"__init__",id:"__init__",children:[],level:4},{value:"suggest",id:"suggest",children:[],level:4},{value:"on_trial_complete",id:"on_trial_complete",children:[],level:4},{value:"reach",id:"reach",children:[],level:4},{value:"can_suggest",id:"can_suggest",children:[],level:4}],level:2}],i={toc:s};function h(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},i,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"searchthread-objects"},"SearchThread Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"class SearchThread()\n")),(0,a.kt)("p",null,"Class of global or local search thread."),(0,a.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def __init__(mode: str = "min", search_alg: Optional[Searcher] = None, cost_attr: Optional[str] = "time_total_s", eps: Optional[float] = 1.0)\n')),(0,a.kt)("p",null,"When search_alg is omitted, use local search FLOW2."),(0,a.kt)("h4",{id:"suggest"},"suggest"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def suggest(trial_id: str) -> Optional[Dict]\n")),(0,a.kt)("p",null,"Use the suggest() of the underlying search algorithm."),(0,a.kt)("h4",{id:"on_trial_complete"},"on","_","trial","_","complete"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def on_trial_complete(trial_id: str, result: Optional[Dict] = None, error: bool = False)\n")),(0,a.kt)("p",null,"Update the statistics of the thread."),(0,a.kt)("h4",{id:"reach"},"reach"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def reach(thread) -> bool\n")),(0,a.kt)("p",null,"Whether the incumbent can reach the incumbent of thread."),(0,a.kt)("h4",{id:"can_suggest"},"can","_","suggest"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef can_suggest() -> bool\n")),(0,a.kt)("p",null,"Whether the thread can suggest new configs."))}h.isMDXComponent=!0}}]);